import cv2
import numpy as np
from initial_processing import *
from pixel_coordinates import *
frame_number=[0,0,0]
minimum_area=[350,250,800]
videos=["video1.mp4","video2.mp4","video3.mp4"]
coordinates=[[154,354,215,630],[116,480,0,348],[350,720,100,650]]
myareas=[43625,79436,132677]
averages=[4,10,5]
circles=[[360,35,1.2],[47,83,1.5],[63,40,1.7]]
def object_detection(cap,object_detector,video_number):
    totalFrames = cap.get(cv2.CAP_PROP_FRAME_COUNT)
    frame_no=frame_number[video_number]
    if(totalFrames<=frame_no):
        frame_no=0
    cap.set(cv2.CAP_PROP_POS_FRAMES, frame_no)
    i=frame_no
    densities=[0]*60
    sum_total_density=0
    min_area=minimum_area[video_number]
    y1=coordinates[video_number][0]
    y2=coordinates[video_number][1]
    x1=coordinates[video_number][2]
    x2=coordinates[video_number][3]
    myarea=myareas[video_number]
    circle_x=circles[video_number][0]
    circle_y=circles[video_number][1]
    font_scale=circles[video_number][2]
    flag=0
    j=0
    while i<totalFrames:
        i=i+1
        total_area = 0
        ret,frame=cap.read()
        height,width,_=frame.shape
        #extract region of interest
        ROI = frame[y1:y2,x1:x2]
        mask=object_detector.apply(ROI)
        if(flag!=1):
            #cv2.imshow("masked",mask)
            #cv2.waitKey(0)
            _,mask=cv2.threshold(mask,127,255,cv2.THRESH_BINARY)
            #finding contours in the image
            contours,_=cv2.findContours(mask,cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)
            for cnt in contours:
                #calculate area and remove small components
                area=cv2.contourArea(cnt)
                x, y, w, h = cv2.boundingRect(cnt)
                #calculating centroid of moving vehicle
                cx=int((2*x+w)/2)
                cy=int((2*y+h)/2)
                if area>min_area and cx>nested_dict[video_number][cy][0] and cx<nested_dict[video_number][cy][1]:
                    total_area=total_area+(w*h)
                    #drawung rectangle along the detected contours
                    cv2.rectangle(ROI, (x, y), (x + w, y + h), (0, 255, 0), 3)
            if total_area>=myarea:
                total_area=myarea
            #density calculation of each frame
            density=int((total_area * 100) / myarea)
            sum_total_density = sum_total_density + density
            sum_total_density=sum_total_density-densities[i%60]
            densities[i%60]=density
            #average density in last 60 frames
            average_density=int(sum_total_density/60)
            print("video_number:",video_number,"frame_no:",i,"total_area:",total_area,"density:",density,"last_2_seconds_average_density:",average_density)
            cv2.imshow("ROI", ROI)
            #less vehicle density detection
            if(average_density<averages[video_number] and i>frame_no+60):
                print("low vehicle density")
                print("yellow light on")
                flag=1
        else:
            #last 5 seconds timer
            j=j+1
            timer=4-int((j/30))
            cv2.putText(ROI, str(timer), (circle_x,circle_y), cv2.FONT_HERSHEY_SIMPLEX,font_scale, (0, 255, 0), 4, cv2.LINE_AA)
            print("timer=",timer)
            cv2.imshow("ROI", ROI)
            if(timer==0):
                frame_number[video_number] = i
                break
        if(i-frame_no>1800):
            print("red light on")
            frame_number[video_number] = i
            break
        key=cv2.waitKey(30)
        if key==27:
            break
    #ROI=frame[350:720,100:650]
    #cv2.imwrite("ROI.jpg", ROI)
    cap.release()
    video_number=video_number+1
    if(video_number>2):
        video_number=0
    mainProgram(video_number)
    #print(mycontours)
def mainProgram(video_number):
    cap=cv2.VideoCapture(videos[video_number])
    #count=initial_process(cap)
    count=5
    #print("edge_count:",count)
    if count<1:
        video_number=video_number+1
        if(video_number>2):
            video_number=0
        mainProgram(video_number)
    else:
        vehicle_detection(cap,video_number)
def vehicle_detection(cap,video_number):
    object_detector=cv2.createBackgroundSubtractorMOG2(history=100,varThreshold=40)
    object_detection(cap,object_detector,video_number)
    #cv2.imshow("background",background)
    #cv2.waitKey(0)
""""
dict1,myarea=pixel_coordinates()
for j in dict1.keys():
    min1=min(dict1[j])
    max1=max(dict1[j])
    dict1[j]=[min1,max1]
print(dict1)
"""
dict1={0: [6, 79], 1: [6, 79], 2: [6, 83], 3: [6, 84], 4: [6, 86], 5: [7, 88], 6: [7, 91], 7: [8, 92], 8: [9, 101], 9: [11, 103], 10: [11, 106], 11: [12, 108], 12: [12, 111], 13: [13, 113], 14: [14, 117], 15: [15, 119], 16: [16, 122], 17: [17, 123], 18: [18, 124], 19: [18, 128], 20: [19, 132], 21: [20, 133], 22: [21, 136], 23: [22, 139], 24: [22, 142], 25: [23, 143], 26: [24, 146], 27: [25, 148], 28: [26, 152], 29: [27, 153], 30: [28, 156], 31: [28, 158], 32: [30, 160], 33: [31, 163], 34: [31, 166], 35: [32, 168], 36: [32, 170], 37: [32, 172], 38: [33, 176], 39: [33, 177], 40: [34, 181], 41: [34, 183], 42: [35, 186], 43: [36, 187], 44: [36, 190], 45: [37, 193], 46: [36, 196], 47: [38, 197], 48: [40, 200], 49: [41, 202], 50: [42, 205], 51: [43, 207], 52: [44, 210], 53: [44, 213], 54: [45, 216], 55: [46, 217], 56: [47, 219], 57: [48, 223], 58: [49, 226], 59: [50, 227], 60: [51, 231], 61: [51, 232], 62: [53, 235], 63: [53, 237], 64: [54, 240], 65: [55, 242], 66: [56, 246], 67: [56, 247], 68: [57, 250], 69: [58, 252], 70: [59, 255], 71: [60, 257], 72: [60, 260], 73: [62, 262], 74: [62, 264], 75: [63, 267], 76: [64, 270], 77: [65, 271], 78: [66, 275], 79: [66, 276], 80: [67, 280], 81: [68, 281], 82: [69, 284], 83: [70, 287], 84: [70, 290], 85: [71, 291], 86: [72, 294], 87: [73, 297], 88: [74, 300], 89: [75, 301], 90: [76, 304], 91: [76, 306], 92: [77, 309], 93: [78, 311], 94: [79, 313], 95: [80, 317], 96: [80, 319], 97: [81, 321], 98: [82, 324], 99: [83, 326], 100: [84, 329], 101: [85, 331], 102: [86, 334], 103: [86, 335], 104: [87, 338], 105: [88, 341], 106: [89, 344], 107: [90, 345], 108: [91, 347], 109: [91, 351], 110: [92, 354], 111: [93, 355], 112: [94, 358], 113: [95, 360], 114: [96, 363], 115: [96, 365], 116: [97, 368], 117: [98, 370], 118: [99, 373], 119: [99, 375], 120: [100, 378], 121: [101, 380], 122: [102, 383], 123: [103, 385], 124: [104, 388], 125: [105, 390], 126: [106, 392], 127: [106, 395], 128: [107, 398], 129: [108, 400], 130: [109, 402], 131: [110, 403], 132: [110, 408], 133: [111, 409], 134: [112, 414], 135: [113, 414], 136: [114, 414], 137: [115, 414], 138: [116, 414], 139: [116, 414], 140: [117, 414], 141: [118, 414], 142: [119, 414], 143: [120, 414], 144: [120, 414], 145: [121, 414], 146: [122, 414], 147: [123, 414], 148: [124, 414], 149: [125, 414], 150: [126, 414], 151: [126, 414], 152: [127, 414], 153: [128, 414], 154: [129, 414], 155: [130, 414], 156: [131, 414], 157: [132, 414], 158: [133, 414], 159: [134, 414], 160: [135, 414], 161: [136, 414], 162: [136, 414], 163: [137, 414], 164: [138, 414], 165: [139, 414], 166: [140, 414], 167: [140, 414], 168: [141, 414], 169: [142, 414], 170: [143, 414], 171: [144, 414], 172: [144, 414], 173: [145, 414], 174: [146, 414], 175: [147, 414], 176: [148, 414], 177: [149, 414], 178: [149, 414], 179: [150, 414], 180: [151, 414], 181: [152, 414], 182: [152, 414], 183: [153, 414], 184: [154, 414], 185: [155, 414], 186: [156, 414], 187: [157, 414], 188: [158, 414], 189: [159, 414], 190: [159, 414], 191: [160, 414], 192: [161, 414], 193: [162, 414], 194: [162, 414], 195: [163, 414], 196: [164, 414], 197: [165, 414], 198: [166, 414], 199: [166, 414]}
dict2={0: [218, 318], 1: [218, 318], 2: [218, 318], 3: [219, 318], 4: [219, 317], 5: [218, 317], 6: [219, 318], 7: [219, 318], 8: [220, 319], 9: [220, 319], 10: [220, 319], 11: [220, 321], 12: [219, 321], 13: [218, 321], 14: [218, 321], 15: [218, 322], 16: [217, 323], 17: [217, 323], 18: [216, 323], 19: [216, 324], 20: [216, 324], 21: [215, 325], 22: [214, 325], 23: [214, 325], 24: [213, 326], 25: [212, 327], 26: [211, 327], 27: [211, 327], 28: [210, 328], 29: [209, 328], 30: [209, 328], 31: [208, 329], 32: [208, 329], 33: [208, 330], 34: [208, 330], 35: [208, 331], 36: [208, 331], 37: [208, 332], 38: [207, 332], 39: [206, 333], 40: [206, 333], 41: [206, 333], 42: [206, 334], 43: [205, 333], 44: [204, 335], 45: [204, 335], 46: [203, 336], 47: [202, 338], 48: [201, 338], 49: [200, 339], 50: [200, 339], 51: [199, 338], 52: [198, 338], 53: [197, 338], 54: [197, 339], 55: [196, 338], 56: [195, 338], 57: [194, 338], 58: [193, 338], 59: [192, 338], 60: [192, 338], 61: [192, 338], 62: [190, 338], 63: [189, 338], 64: [189, 337], 65: [188, 337], 66: [187, 337], 67: [186, 337], 68: [186, 337], 69: [185, 337], 70: [184, 337], 71: [183, 337], 72: [183, 337], 73: [182, 337], 74: [181, 337], 75: [180, 337], 76: [180, 337], 77: [179, 337], 78: [178, 337], 79: [177, 337], 80: [176, 337], 81: [176, 336], 82: [175, 336], 83: [175, 336], 84: [173, 336], 85: [172, 336], 86: [172, 336], 87: [171, 336], 88: [170, 336], 89: [169, 336], 90: [169, 336], 91: [168, 336], 92: [167, 336], 93: [166, 336], 94: [166, 336], 95: [165, 336], 96: [164, 335], 97: [164, 335], 98: [163, 335], 99: [162, 335], 100: [161, 335], 101: [160, 335], 102: [159, 335], 103: [158, 335], 104: [158, 335], 105: [157, 335], 106: [156, 335], 107: [155, 335], 108: [154, 335], 109: [153, 335], 110: [152, 335], 111: [152, 335], 112: [151, 335], 113: [150, 335], 114: [149, 335], 115: [148, 335], 116: [147, 335], 117: [146, 335], 118: [146, 335], 119: [145, 335], 120: [144, 335], 121: [143, 334], 122: [143, 334], 123: [142, 334], 124: [141, 334], 125: [140, 333], 126: [139, 333], 127: [138, 333], 128: [138, 333], 129: [137, 333], 130: [136, 333], 131: [135, 333], 132: [134, 333], 133: [134, 333], 134: [133, 332], 135: [132, 332], 136: [131, 332], 137: [130, 332], 138: [130, 331], 139: [129, 331], 140: [128, 331], 141: [127, 331], 142: [126, 331], 143: [125, 331], 144: [124, 330], 145: [124, 330], 146: [123, 330], 147: [122, 330], 148: [121, 330], 149: [120, 330], 150: [120, 329], 151: [119, 329], 152: [118, 329], 153: [117, 329], 154: [116, 328], 155: [116, 329], 156: [115, 328], 157: [114, 328], 158: [113, 328], 159: [112, 328], 160: [111, 328], 161: [111, 328], 162: [110, 327], 163: [109, 327], 164: [108, 327], 165: [107, 327], 166: [106, 326], 167: [106, 326], 168: [105, 326], 169: [104, 325], 170: [103, 325], 171: [102, 325], 172: [102, 325], 173: [101, 325], 174: [100, 325], 175: [99, 325], 176: [98, 325], 177: [97, 324], 178: [97, 321], 179: [96, 321], 180: [95, 321], 181: [94, 320], 182: [93, 319], 183: [92, 318], 184: [92, 316], 185: [91, 315], 186: [90, 315], 187: [89, 315], 188: [89, 314], 189: [88, 314], 190: [87, 314], 191: [86, 314], 192: [85, 314], 193: [85, 314], 194: [84, 314], 195: [84, 314], 196: [82, 314], 197: [81, 314], 198: [80, 314], 199: [79, 314], 200: [78, 314], 201: [78, 314], 202: [77, 314], 203: [76, 314], 204: [75, 314], 205: [74, 314], 206: [74, 314], 207: [73, 314], 208: [72, 314], 209: [71, 314], 210: [71, 314], 211: [70, 314], 212: [69, 314], 213: [68, 311], 214: [67, 309], 215: [66, 308], 216: [66, 309], 217: [65, 309], 218: [64, 310], 219: [63, 310], 220: [62, 310], 221: [61, 311], 222: [61, 310], 223: [61, 311], 224: [59, 311], 225: [58, 312], 226: [57, 312], 227: [56, 312], 228: [56, 312], 229: [55, 312], 230: [54, 312], 231: [53, 312], 232: [52, 311], 233: [52, 311], 234: [51, 311], 235: [50, 311], 236: [49, 310], 237: [48, 310], 238: [47, 310], 239: [46, 309], 240: [46, 309], 241: [45, 309], 242: [45, 309], 243: [43, 308], 244: [42, 308], 245: [42, 308], 246: [41, 307], 247: [40, 307], 248: [39, 307], 249: [38, 307], 250: [38, 307], 251: [38, 306], 252: [37, 306], 253: [36, 306], 254: [36, 305], 255: [36, 305], 256: [36, 305], 257: [36, 305], 258: [36, 304], 259: [35, 304], 260: [33, 304], 261: [32, 304], 262: [31, 303], 263: [30, 303], 264: [29, 303], 265: [28, 302], 266: [27, 302], 267: [26, 302], 268: [25, 301], 269: [24, 301], 270: [24, 301], 271: [23, 301], 272: [22, 300], 273: [21, 300], 274: [21, 300], 275: [20, 299], 276: [19, 299], 277: [18, 299], 278: [16, 299], 279: [15, 299], 280: [14, 298], 281: [13, 298], 282: [12, 297], 283: [12, 297], 284: [11, 297], 285: [10, 296], 286: [9, 296], 287: [8, 296], 288: [8, 296], 289: [8, 296], 290: [7, 295], 291: [6, 295], 292: [5, 295], 293: [4, 295], 294: [3, 295], 295: [0, 294], 296: [0, 294], 297: [0, 294], 298: [0, 293], 299: [0, 293], 300: [0, 293], 301: [0, 292], 302: [0, 292], 303: [0, 292], 304: [0, 291], 305: [0, 291], 306: [0, 291], 307: [0, 291], 308: [0, 290], 309: [0, 290], 310: [0, 290], 311: [0, 290], 312: [0, 289], 313: [0, 289], 314: [0, 289], 315: [0, 289], 316: [0, 288], 317: [0, 288], 318: [0, 288], 319: [0, 287], 320: [0, 287], 321: [0, 287], 322: [0, 286], 323: [0, 286], 324: [0, 286], 325: [0, 286], 326: [0, 285], 327: [0, 285], 328: [0, 285], 329: [0, 284], 330: [0, 284], 331: [0, 284], 332: [0, 283], 333: [0, 283], 334: [0, 283], 335: [0, 283], 336: [0, 283], 337: [0, 283], 338: [0, 282], 339: [0, 282], 340: [0, 281], 341: [0, 281], 342: [0, 281], 343: [0, 281], 344: [0, 281], 345: [0, 280], 346: [0, 280], 347: [0, 280], 348: [0, 279], 349: [0, 279], 350: [0, 279], 351: [0, 279], 352: [0, 278], 353: [0, 278], 354: [0, 278], 355: [0, 277], 356: [0, 277], 357: [0, 277], 358: [0, 277], 359: [0, 276], 360: [0, 276], 361: [0, 276], 362: [0, 275], 363: [1, 275]}
dict3={0: [367, 514], 1: [367, 514], 2: [365, 515], 3: [363, 515], 4: [361, 515], 5: [360, 514], 6: [357, 514], 7: [356, 513], 8: [355, 513], 9: [353, 513], 10: [351, 513], 11: [349, 513], 12: [347, 513], 13: [346, 512], 14: [344, 511], 15: [342, 511], 16: [341, 511], 17: [339, 511], 18: [338, 511], 19: [335, 510], 20: [333, 510], 21: [332, 510], 22: [331, 509], 23: [330, 509], 24: [330, 509], 25: [329, 509], 26: [326, 509], 27: [325, 508], 28: [323, 508], 29: [322, 507], 30: [319, 507], 31: [318, 507], 32: [316, 507], 33: [315, 507], 34: [313, 507], 35: [311, 506], 36: [309, 506], 37: [307, 505], 38: [306, 505], 39: [303, 505], 40: [303, 505], 41: [300, 505], 42: [298, 505], 43: [297, 504], 44: [294, 503], 45: [293, 503], 46: [291, 503], 47: [289, 503], 48: [287, 503], 49: [286, 502], 50: [285, 502], 51: [283, 502], 52: [281, 501], 53: [280, 501], 54: [277, 501], 55: [276, 501], 56: [274, 501], 57: [272, 500], 58: [269, 500], 59: [268, 499], 60: [266, 499], 61: [264, 499], 62: [263, 499], 63: [261, 499], 64: [259, 499], 65: [257, 498], 66: [255, 498], 67: [253, 497], 68: [251, 497], 69: [249, 497], 70: [247, 497], 71: [246, 496], 72: [245, 497], 73: [244, 496], 74: [241, 495], 75: [239, 494], 76: [237, 493], 77: [236, 493], 78: [234, 492], 79: [232, 492], 80: [231, 492], 81: [230, 492], 82: [229, 493], 83: [226, 492], 84: [225, 493], 85: [223, 492], 86: [222, 491], 87: [220, 491], 88: [218, 491], 89: [217, 491], 90: [215, 491], 91: [213, 491], 92: [212, 490], 93: [210, 490], 94: [209, 490], 95: [207, 490], 96: [205, 489], 97: [204, 489], 98: [202, 489], 99: [201, 489], 100: [199, 489], 101: [198, 489], 102: [196, 488], 103: [194, 488], 104: [193, 487], 105: [191, 487], 106: [189, 487], 107: [188, 487], 108: [186, 487], 109: [184, 486], 110: [182, 486], 111: [180, 486], 112: [178, 485], 113: [176, 485], 114: [173, 485], 115: [171, 485], 116: [168, 485], 117: [167, 484], 118: [165, 484], 119: [163, 484], 120: [161, 484], 121: [159, 484], 122: [156, 483], 123: [155, 483], 124: [152, 483], 125: [150, 483], 126: [148, 482], 127: [146, 482], 128: [143, 482], 129: [142, 481], 130: [139, 481], 131: [138, 481], 132: [137, 481], 133: [136, 481], 134: [136, 480], 135: [135, 480], 136: [133, 481], 137: [132, 480], 138: [130, 479], 139: [129, 479], 140: [128, 479], 141: [126, 479], 142: [125, 479], 143: [123, 479], 144: [122, 479], 145: [120, 478], 146: [117, 477], 147: [116, 477], 148: [115, 477], 149: [113, 477], 150: [111, 477], 151: [110, 476], 152: [109, 476], 153: [107, 476], 154: [105, 476], 155: [104, 476], 156: [103, 475], 157: [101, 475], 158: [101, 475], 159: [99, 475], 160: [97, 475], 161: [95, 474], 162: [94, 474], 163: [92, 473], 164: [90, 473], 165: [89, 473], 166: [87, 473], 167: [86, 473], 168: [84, 473], 169: [83, 473], 170: [81, 472], 171: [80, 472], 172: [74, 471], 173: [72, 471], 174: [70, 471], 175: [70, 471], 176: [68, 471], 177: [66, 470], 178: [65, 471], 179: [63, 470], 180: [61, 469], 181: [60, 469], 182: [59, 469], 183: [58, 469], 184: [56, 469], 185: [55, 469], 186: [53, 469], 187: [52, 468], 188: [51, 468], 189: [49, 467], 190: [48, 467], 191: [46, 467], 192: [45, 467], 193: [43, 467], 194: [42, 467], 195: [40, 466], 196: [37, 466], 197: [36, 465], 198: [34, 465], 199: [32, 464], 200: [29, 463], 201: [28, 463], 202: [27, 463], 203: [25, 463], 204: [23, 463], 205: [21, 463], 206: [19, 463], 207: [17, 462], 208: [15, 461], 209: [14, 461], 210: [12, 461], 211: [10, 461], 212: [7, 461], 213: [6, 460], 214: [4, 460], 215: [3, 460], 216: [0, 460], 217: [0, 460], 218: [0, 459], 219: [0, 459], 220: [0, 459], 221: [0, 459], 222: [0, 459], 223: [0, 458], 224: [0, 458], 225: [0, 458], 226: [0, 457], 227: [0, 457], 228: [0, 457], 229: [0, 457], 230: [0, 457], 231: [0, 456], 232: [0, 457], 233: [0, 456], 234: [0, 456], 235: [0, 456], 236: [0, 455], 237: [0, 455], 238: [0, 455], 239: [0, 455], 240: [0, 455], 241: [0, 455], 242: [0, 455], 243: [0, 454], 244: [0, 453], 245: [0, 453], 246: [0, 453], 247: [0, 453], 248: [0, 453], 249: [0, 452], 250: [0, 451], 251: [0, 451], 252: [0, 450], 253: [0, 450], 254: [0, 451], 255: [0, 450], 256: [0, 450], 257: [0, 450], 258: [0, 449], 259: [0, 449], 260: [0, 449], 261: [0, 449], 262: [0, 449], 263: [0, 448], 264: [0, 448], 265: [0, 448], 266: [0, 447], 267: [0, 447], 268: [0, 447], 269: [0, 447], 270: [0, 447], 271: [0, 446], 272: [0, 445], 273: [0, 445], 274: [0, 445], 275: [0, 445], 276: [0, 445], 277: [0, 445], 278: [0, 444], 279: [0, 444], 280: [2, 443], 281: [3, 443], 282: [0, 443], 283: [0, 443], 284: [0, 443], 285: [0, 443], 286: [0, 443], 287: [0, 442], 288: [0, 441], 289: [0, 441], 290: [0, 441], 291: [0, 441], 292: [0, 441], 293: [0, 441], 294: [0, 441], 295: [0, 440], 296: [0, 439], 297: [0, 439], 298: [0, 439], 299: [0, 439], 300: [0, 439], 301: [0, 438], 302: [0, 438], 303: [0, 438], 304: [0, 437], 305: [0, 437], 306: [0, 437], 307: [0, 437], 308: [0, 437], 309: [0, 436], 310: [0, 436], 311: [0, 436], 312: [0, 435], 313: [0, 435], 314: [0, 435], 315: [0, 435], 316: [0, 435], 317: [0, 434], 318: [0, 434], 319: [0, 434], 320: [0, 433], 321: [0, 433], 322: [0, 433], 323: [0, 432], 324: [0, 432], 325: [0, 432], 326: [0, 431], 327: [0, 431], 328: [0, 431], 329: [0, 431], 330: [0, 431], 331: [0, 431], 332: [0, 431], 333: [0, 430], 334: [0, 429], 335: [0, 429], 336: [0, 429], 337: [0, 429], 338: [0, 429], 339: [0, 428], 340: [0, 428], 341: [0, 428], 342: [0, 427], 343: [0, 427], 344: [0, 427], 345: [0, 427], 346: [0, 427], 347: [0, 426], 348: [0, 426], 349: [0, 426], 350: [0, 425], 351: [0, 425], 352: [0, 425], 353: [0, 425], 354: [0, 425], 355: [0, 424], 356: [0, 424], 357: [0, 424], 358: [0, 423], 359: [0, 423], 360: [0, 423], 361: [2, 422], 362: [4, 422], 363: [5, 419], 364: [5, 415], 365: [6, 414], 366: [7, 381], 367: [12, 379], 368: [88, 235], 369: [88, 234]}
nested_dict={0:dict1,1:dict2,2:dict3}
#print(nested_dict)
mainProgram(0)